package com.hover.stax.requests;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;

import androidx.annotation.NonNull;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

import com.amplitude.api.Amplitude;
import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;
import com.hover.stax.R;
import com.hover.stax.database.Constants;
import com.hover.stax.contacts.StaxContact;
import com.hover.stax.utils.DateUtils;
import com.hover.stax.utils.Utils;
import com.hover.stax.utils.paymentLinkCryptography.Base64;
import com.hover.stax.utils.paymentLinkCryptography.Encryption;

import java.security.NoSuchAlgorithmException;

import io.sentry.Sentry;

@Entity(tableName = "requests")
public class Request {

	@PrimaryKey(autoGenerate = true)
	@NonNull
	public int id;

	@ColumnInfo(name = "description")
	public String description;

	@NonNull
	@ColumnInfo(name = "requestee_ids")
	public String requestee_ids;

	@ColumnInfo(name = "amount")
	public String amount;

	@ColumnInfo(name = "requester_institution_id")
	public int requester_institution_id;

	@ColumnInfo(name  = "requester_number")
	public String requester_number;

	@ColumnInfo(name = "note")
	public String note;

	@ColumnInfo(name = "message")
	public String message;

	@ColumnInfo(name = "matched_transaction_uuid")
	public String matched_transaction_uuid;

	@NonNull
	@ColumnInfo(name = "date_sent", defaultValue = "CURRENT_TIMESTAMP")
	public Long date_sent;

	public Request() {}

	public Request(String amount, String note, String requester, int receiving_channel_id, Context context) {
		this.amount = amount;
		this.note = note;
		this.requester_number = requester;
		this.requester_institution_id = receiving_channel_id;
		date_sent = DateUtils.now();
		description = getDescription(null, context);
	}

	public Request(String paymentLink) {
		String[] splitString = paymentLink.split(Constants.PAYMENT_LINK_SEPERATOR);
		amount = splitString[0].equals("0.00") ? "" : Utils.formatAmount(splitString[0]);
		requester_number = splitString[2];
		requester_institution_id = Integer.parseInt(splitString[1]);
	}

	public String getDescription(StaxContact contact, Context c) { return c.getString(R.string.descrip_request, contact.shortName()); }

	Request setRecipient(StaxContact c) { this.requestee_ids = c.id; return this; }

	public String generateSMS(Context c) {
		String amountString = amount != null ? c.getString(R.string.sms_amount_detail, Utils.formatAmount(amount)) : "";
		String noteString = note != null ? c.getString(R.string.sms_note_detail, note) : "";
		String paymentLink = generateStaxLink(c);

		return c.getString(R.string.sms_request_template, amountString, noteString, paymentLink);
	}

	 private String generateStaxLink(Context c) {
		String amountNoFormat = amount != null ? amount : "0.00";
		String params = c.getString(R.string.payment_url_end, amountNoFormat, requester_institution_id, requester_number, DateUtils.now());

		try {
			Encryption encryption =  Request.getEncryptionSettings().build();
			String encryptedString = encryption.encryptOrNull(params);
			//replacing + for () because of Uri escaping in line 164 for whatsapp. Chose () cos the letter is not generated by the encryption
			return c.getResources().getString(R.string.payment_root_url)+ (encryptedString.replace("+","()"));
//			return c.getResources().getString(R.string.payment_root_url, encryptedString);
		} catch (NoSuchAlgorithmException e) {
			Amplitude.getInstance().logEvent(c.getString(R.string.stax_link_encryption_failure_2));
			return null;
		}
	}

	public static Encryption.Builder getEncryptionSettings() {
		//PUTTING THIS HERE FOR NOW, BUT THIS SETTINGS OUGHT TO BE IN THE REPO SO SETTINGS COMES FROM ONLINE SERVER.
		return new Encryption.Builder()
			       .setKeyLength(128)
			       .setKeyAlgorithm("AES")
			       .setCharsetName("UTF8")
			       .setIterationCount(65536)
			       .setKey("ves€Z€xs€aBKgh")
			       .setDigestAlgorithm("SHA1")
			       .setSalt("A secured salt")
			       .setBase64Mode(Base64.DEFAULT)
			       .setAlgorithm("AES/CBC/PKCS5Padding")
			       .setSecureRandomAlgorithm("SHA1PRNG")
			       .setSecretKeyType("PBKDF2WithHmacSHA1")
			       .setIv(new byte[]{29, 88, -79, -101, -108, -38, -126, 90, 52, 101, -35, 114, 12, -48, -66, -30});
	}

	void sendUsingSms(Activity activity) {
//		Amplitude.getInstance().logEvent(context.getString(R.string.clicked_send_sms_request));
//		if (!PermissionUtils.hasSmsPermission(activity))
//			activity.requestPermissions(new String[]{Manifest.permission.RECEIVE_SMS, Manifest.permission.READ_SMS}, Constants.SMS);
//		else{
//			Intent sendIntent = new Intent();
//			sendIntent.setAction(Intent.ACTION_VIEW);
//			sendIntent.setData(Uri.parse("smsto:" + recipients));
//			sendIntent.putExtra(Intent.EXTRA_TEXT, smsContent);
//			sendIntent.putExtra("sms_body", smsContent);
//			activity.startActivityForResult(Intent.createChooser(sendIntent, "Request"), Constants.SMS);
//		}
	}
	static void  sendUsingWhatsapp(String recipient, String countryAlpha, String smsContent, Context context, Activity activity) {
		Amplitude.getInstance().logEvent(context.getString(R.string.clicked_send_whatsapp_request));
		Intent sendIntent = new Intent();
		sendIntent.setAction(Intent.ACTION_VIEW);

		PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
		try {
			Phonenumber.PhoneNumber formattedPhone = phoneUtil.parse(recipient, countryAlpha);
			String whatsapp ="https://api.whatsapp.com/send?phone="+formattedPhone +"&text=" + smsContent;
			sendIntent.setData(Uri.parse(whatsapp));
			activity.startActivityForResult(sendIntent, Constants.SMS);
		} catch (NumberParseException e) {
			Sentry.capture(e.getMessage());
		}
	}
}
